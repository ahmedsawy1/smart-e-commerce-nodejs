what to learn:- اعملها فى الاخر خالص يا شبح 
    (1) Hashing the Password.  line >> 9
    (2) Login and Create a Token.   line >> 19
    (3) Protect the Requests with the Token.   line >> 101

//////////////////////////////


(1) Hashing the Password,

    1- npm i bcryptjs , and import it as common.   
    2- type this code in post request with the other req fields:

         <//>   passwordHash: bcrypt.hashSync(req.body.password, 10),   <//>
       note >> you must type in the Postman passowrd and not passwordHash.



(2) Login and Create a Token, 

    1- you can get a user using that code, thats simple:-
        <//>
            router.post("/login", async (req, res) => {
            const user = await User.findOne({ name: req.body.name });
            if (!user) {
                return res.status(400).send("User Is Not Found");
            }
            res.send(user);
            });
            module.exports = router;
        <//>
    But how to compare it with passowrd ??

    2- compare with passowrd:-   
        <//>
            if (user && bcrypt.compareSync(req.body.password, user.passwordHash)) {
                res.status(200).send("User Authenticated");
            } else {
                return res.status(400).send("Password is Wrong");
            }
            // don't forget to delete >> res.send(user);
        <//>
    But how to get a Token

    3- get Token using jsonwebtoken
        1- npm i jsonwebtoken
        2- and import it like this >> const jwt = require("jsonwebtoken");
        3- after succes add that const " if (user && bcrypt.compareSync(req.body.password, user.passwordHash)) { "
        <//>
            const token = jwt.sign( 
            {
              userId: user.id, // >> الواد مش عارف يشرح هو قال انت هنا بتحط اى داتا .. وفعلا طلع كلامه صح انا حطيت استرينج فى حروف أيه ونفعت 
            },
            "secret",  // >> دا السر اللى بيخليك تعمل توكن مختلف 
            // ودا عشان التوكن ينفع يشتغل صح  auth لازم يكون السر موحد مع فانشكشن ال 
            {
                expiresIn: "1d", // >> on day  // >> دا لو عاوز التوكن صلاحيته تنتهى فى يوم واحد
                // expiresIn:"1w", >> one week
                // expiresIn:"1m", >> one month
            }
            );
        <//>
        4- at end instead of res.send "User Authenticated", you send the Token with email
        <//>
            res.status(200).send({
            user: user.email,
            token: token,
            });
        <//>

>> The Wohle CODE:- 
        <//>
            router.post("/login", async (req, res) => {
            const user = await User.findOne({ email: req.body.email });
            if (!user) {
                return res.status(400).send("User Is Not Found");
            }
            if (user && bcrypt.compareSync(req.body.password, user.passwordHash)) {
                const token = jwt.sign(
                {
                    userId: user.id,
                },
                "secret",
                {
                    expiresIn: "1d", // >> on day
                }
                );
                res.status(200).send({
                user: user.email,
                token: token,
                });
            } else {
                return res.status(400).send("Password is wrong");
            }
            });
        <//>


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        

Now We make Token, Lets protect our Request with that token

(1) instalation, 
    1- create a new File "jwt" in folder "helpers"
    2- npm i express-jwt

(2) Code,    
    1- in "jwt" you'll write,
       <//>
            const jwt = require("express-jwt");

            function auth() {
            return jwt({
                secret: "secret",
                algorithms: ["HS256"],
            });
            }
            module.exports = auth;
       <//>

    2- in app.js put it in middlewere,
        <//>  app.use(auth());  <//>
        كدا بقا يا شبح كل الركويتست بتاعتك مش هتعرف تعملها الا لو دخلت توكن الاول ^_^

(3) Handling Errors >> فكك منه مش مهم .. بس لو حابب تاخد فكره اذا هو الفيديو رقم 47       


(4) Excludeing from Protection
    لو انت عاوز مثلا تعمل ركويست معين وميكونش محمى بأى توكن .. الحل ايه ؟؟
    In "helpers/jwt", after algorithms
    <//>
        .unless({
        path: ["/api/v1/users/login"],    // كدا يدخل وتعمل لوج ان عادى من غير ما تحتاج توكن
        });
    <//>

    لو حابب يكون متاح ليه انه يعمل اند بوينت معينة لركويست معين
    <//>
         }).unless({
            path: [
            { url: "/api/v1/products", methods: ["GET", "OPTIONS"] }, // فيه مشكلة هنا بص تحت
            "/api/v1/users/login",
            ],
        });
        }
    <//>    

    المشكلة .. بص يا شبح فيه حاجات تانية مرتبطة بالبروداكتس زى انك مثلا تجيب عددهم 
    او انك تيجب واحد منه باستخدام الاى دى كدا هتعمل سطور كود كتير اوى .. ايه الحل 
    regular expression الحل هو

    instead of "/api/v1/products" >>> /\/api\/v1\/products(.*)/





// The admin 


(5) لما تحب تخلى الادمن بس هو اللى يعمل بوست للبروداكت انما اى حد تانى لا  
jwt فى البداية .. بتكتب الكود جوا الاوبجكت الخاص ب  
    <//> isRevoked: isRevoked, <//>

بتكتب الفانكشن دى تحت بقا  
    <//>
        async function isRevoked(req, payload, done) {
            if (!payload.isAdmin) {
                done(null, true);
            }
            done();
            }
    <//>

    Note>>  don't forget <//> isAdmin: user.isAdmin, <//> in users/login router
      

>> The Wohle CODE:- in "helpers/jwt"
    <//>
        const jwt = require("express-jwt");

        function auth() {
        return jwt({
            secret: "secret",
            algorithms: ["HS256"],
            isRevoked: isRevoked,
        }).unless({
            path: [
            //   { url: "/api/v1/products", methods: ["GET", "OPTIONS"] },
            { url: /\/api\/v1\/products(.*)/, methods: ["GET", "OPTIONS"] },
            "/api/v1/users/login",
            ],
        });
        }

        async function isRevoked(req, payload, done) {
        if (!payload.isAdmin) {
            done(null, true);
        }
        done();
        }
        module.exports = auth;
    <//>