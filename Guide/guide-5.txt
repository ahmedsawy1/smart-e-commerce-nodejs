



1- Object relating
    We learned before how to relate objects, 
    >> <//> type: mongoose.Schema.Types.ObjectId <//>
    ex.
    <//>
        orderItems: [{  // but notice >> we put it in array becuase those are more than one item
            type: mongoose.Schema.Types.ObjectId,
            ref: 'OrderItem',
            required:true
        }],
    <//>
    
    We learned before how to Change "_id" to "id", 
    in "model/order"
    <//>
        orderSchema.virtual("id").get(function () {
        return this._id.toHexString();
        });

        orderSchema.set("toJSON", {
        virtuals: true,
        });    
    <//>    



// Task
// هتجيب الاوردر بالاى  دى
// هتعرض بيانات الايتم جوا الاوردر 
// هتعرض بيانات المنتج اللى جوا الايتم اللى جوا الاوردر
// هتعرض بيانات الكتجروى اللى جوا البروداكت اللى جوا الايتم اللى جوا الاوردر

مراجعة على ال Puplate

  const getOrderById = await Order.findById(req.params.id)
    .populate("user", "name")
    // .populate("orderItems"); // انت كدا يا شبح قدر تعرض البيانات الخاصة بالايتم دى بس

    // .populate({
         path: "orderItems", populate: "product" 
         }) // انت كدا يا شبح قدر تعرض البيانات الخاصة بالايتم دى وكمان بيانات المنتجات جواها

    // كدا انت تجيب الداتا الخاصة بالايتم .. وكمان البروداكت اللى جواها .. وكمان الكاتجورى اللى جواها
    .populate({
      path: "orderItems", populate: {
        path: "product", populate: "category",
      },
    });



ازاى نمسح الاوردر أيتم لما نيجى نمسح الأوردر نفسه
total Code:-
  <//>   // عشان تعمله لازم تعمل ماب وتلف على الحاجات اللى جوا الاوردر .. اللى هى يعنى الاوردر أيتم
      router.delete("/:id", async (req, res) => {
      await Order.findByIdAndRemove(req.params.id)
        .then(async (order) => {
          if (order) {
            await order.orderItems.map(async (orderItem) => {
              await OrderItem.findByIdAndRemove(orderItem);
            });
          }
        })
        .then(res.send("Deleted")); 
      }); 
  <//>

  
  جمع السعر الاجمالى .. يفضل ان الباك انت هو اللى يجمع مش الفرونت عشان ممكن لو واحد فرونت ممكن يعمل داتا مزيفة ويعمل الاورد مثلا ب 2 دولار بدل 1000 دولار
  steps:{
    1- change the value of totlal price in Order post reques to be like this,
          totalPrice: req.body.totalPrice,   >>   totalPrice: totalPrice,

    2-  initial the totalPrice in post request,
          <//>
              const totalPrices = await Promise.all(orderItemsIdsResolved.map(async (orderItemId)=>{
                  const orderItem = await OrderItem.findById(orderItemId).populate('product', 'price');
                  const totalPrice = orderItem.product.price * orderItem.quantity;
                  return totalPrice
              }))
          <//>

    3- culclate the totalPrice,
          const totalPrice = totalPrices.reduce((a,b) => a +b , 0);

    4- again change the value of totlal price in Order post reques to be like this,
          totalPrice: totalPrices,  >>  totalPrice: totalPrice,

  
  The Whole Code,
  <//>
      router.post('/', async (req,res)=>{
          const orderItemsIds = Promise.all(req.body.orderItems.map(async (orderItem) =>{
              let newOrderItem = new OrderItem({
                  quantity: orderItem.quantity,
                  product: orderItem.product
              })

              newOrderItem = await newOrderItem.save();

              return newOrderItem._id;
          }))
          const orderItemsIdsResolved =  await orderItemsIds;

          const totalPrices = await Promise.all(orderItemsIdsResolved.map(async (orderItemId)=>{
              const orderItem = await OrderItem.findById(orderItemId).populate('product', 'price');
              const totalPrice = orderItem.product.price * orderItem.quantity;
              return totalPrice
          }))

          const totalPrice = totalPrices.reduce((a,b) => a +b , 0);

          let order = new Order({
              orderItems: orderItemsIdsResolved,
              shippingAddress1: req.body.shippingAddress1,
              shippingAddress2: req.body.shippingAddress2,
              city: req.body.city,
              zip: req.body.zip,
              country: req.body.country,
              phone: req.body.phone,
              status: req.body.status,
              totalPrice: totalPrice,
              user: req.body.user,
          })
          order = await order.save();

          if(!order)
          return res.status(400).send('the order cannot be created!')

          res.send(order);
      })
  <//>

  }


how to get total sales,
code:,
      <//>
        router.get("/get/totalsales", async (req, res) => {
          const totalSales = await Order.aggregate([
            { $group: { _id: null, totalsales: { $sum: "$totalPrice" } } },
          ]);

          res.send({ totalsales: totalSales });
        });
      <//>  
